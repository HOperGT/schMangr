import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import TOKEN 


bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

async def init_db():
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        role TEXT,
        is_authenticated INTEGER DEFAULT 0
    )
    """)
    conn.commit()
    conn.close()

class TeacherLogin(StatesGroup):
    waiting_for_login = State()

def role_selection_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å", callback_data="role_teacher")
    builder.button(text="üë¶ –£—á–µ–Ω–∏–∫", callback_data="role_student")
    return builder.as_markup()

def teacher_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"))
    builder.add(InlineKeyboardButton(text="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events"))
    builder.add(InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news"))
    builder.add(InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏", callback_data="exit_to_role"))
    return builder.as_markup()

def student_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"))
    builder.add(InlineKeyboardButton(text="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events"))
    builder.add(InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news"))
    builder.add(InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏", callback_data="exit_to_role"))
    return builder.as_markup()

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_selection_menu())

@dp.callback_query(lambda c: c.data == "role_teacher")
async def role_teacher(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("SELECT role, is_authenticated FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user and user[0] == "teacher" and user[1] == 1:
        await callback.message.edit_text("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.", reply_markup=teacher_menu())
    else:
        await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
        await state.set_state(TeacherLogin.waiting_for_login)

@dp.message(TeacherLogin.waiting_for_login)
async def check_teacher_login(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        valid_login = "teacher"
        valid_password = "password"

        login, password = message.text.split()
        if login == valid_login and password == valid_password:
            conn = sqlite3.connect("users.db", isolation_level=None)
            cursor = conn.cursor()
            cursor.execute("INSERT OR REPLACE INTO users (user_id, role, is_authenticated) VALUES (?, ?, ?)",
                           (user_id, "teacher", 1))
            conn.commit()
            conn.close()
            await message.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å!", reply_markup=teacher_menu())
            await state.clear()
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å.")

@dp.callback_query(lambda c: c.data == "role_student")
async def role_student(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, role, is_authenticated) VALUES (?, ?, ?)",
                   (user_id, "student", 1))
    conn.commit()
    conn.close()
    await callback.message.edit_text("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫!", reply_markup=student_menu())

@dp.callback_query(lambda c: c.data == "exit_to_role")
async def exit_to_role(callback: types.CallbackQuery):
    await callback.message.edit_text("üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_selection_menu())

@dp.callback_query(lambda c: c.data in ["schedule", "events", "news"])
async def menu_actions(callback: types.CallbackQuery):
    action_map = {
        "schedule": "üìÖ –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
        "events": "üéâ –ó–¥–µ—Å—å –±—É–¥—É—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
        "news": "üì∞ –ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–æ–≤–æ—Å—Ç–∏."
    }
    await callback.message.edit_text(action_map[callback.data], reply_markup=callback.message.reply_markup)

# –ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def main():
    await init_db()
    await dp.start_polling(bot)
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exit")        