import asyncio
import sqlite3
import app.keyboards as kb
import os

from werkzeug.security import generate_password_hash, check_password_hash
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import TOKEN 
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from app.funny_handlers import  UserStates
# from app.postGet import export_db_to_json, send_data_to_website

class TeacherLogin(StatesGroup):
    waiting_for_login = State()

    
router = Router()

def generate_commands_message():
    commands_by_group = {
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": ["/start", "/help", "/add_class"],
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": ["/admin_message"],
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏": ["/info", "/stats"],
        "OwnerCmd": ["/helpp", "/TS"]
    }

    # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    mmessage = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"

    # –ü–µ—Ä–µ–±–æ—Ä –≥—Ä—É–ø–ø –∏ –∏—Ö –∫–æ–º–∞–Ω–¥
    for group_name, commands in commands_by_group.items():
        mmessage += f"\n**{group_name}:**\n"
        for command in commands:
            mmessage += f"  ‚Ä¢ {command}\n"

    return mmessage

def get_commands_message():
    commands_description = {
        "/start": "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        "/help": "‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å dox file —Å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
        "/add_class": "üìö –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å.",
        "/admin_message": "üõ†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. OnlyAdmin",
        "/info": "üìñ –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.",
        "/stats": "üìà –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
        "/helpp": "‚ùì –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–º–æ—â—å. OnlyAdmin",
        "/TS": "‚öôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ. OnlyAdmin",
        "/send_Events": "üóìÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        "/view_class" : "üìö –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    response_message = "üí° *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n" + "\n".join([f"{cmd} ‚Äì {desc}" for cmd, desc in commands_description.items()])

    return response_message



@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.DefaultState)
    user_id = message.from_user.id
    user_name = message.from_user.username
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id, user_name) VALUES (?, ?)", (user_id,user_name,))
    cursor.execute("SELECT role, is_authenticated FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    if user and user[0] == "teacher" and user[1] == 1:
        response_message = get_commands_message()
        await message.answer(response_message)



        
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å." ,reply_markup=kb.back_role())
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb.role_selection_menu())

@router.message(Command("info"))
async def info_command(message: types.Message, state: FSMContext):
    await message.reply(f"–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¢–ì –∫–∞–Ω–∞–ª–µ –±–æ—Ç–∞.")
    await message.answer(f'https://t.me//NewsSchoolManager')


@router.callback_query(lambda c: c.data == "role_teacher")
async def role_teacher(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("SELECT role, is_authenticated FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user and user[0] == "teacher" and user[1] == 1:
        response_message = get_commands_message()
        await callback.message.answer(response_message)


        await callback.message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.", reply_markup=kb.back_role())
    else:
        await callback.message.edit_text(f"üìù –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å\n\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /notEnter")
        await state.set_state(TeacherLogin.waiting_for_login)

@router.message(TeacherLogin.waiting_for_login)
async def check_teacher_login(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.ActiveState)
    user_id = message.from_user.id

    if message.text == "/notEnter":
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb.role_selection_menu())
        await state.clear()
        await state.set_state(UserStates.DefaultState)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        login, password = message.text.split(maxsplit=1)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        db_path = os.path.join('instance', 'site.db')
        conn_auth = sqlite3.connect(db_path)
        cursor_auth = conn_auth.cursor()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        cursor_auth.execute("SELECT password FROM user WHERE username = ?", (login,))
        auth_data = cursor_auth.fetchone()
        conn_auth.close()

        if not auth_data:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.role_selection_menu())
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if check_password_hash(auth_data[0], password):
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            conn_users = sqlite3.connect("users.db", isolation_level=None)
            cursor_users = conn_users.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor_users.execute(
                "INSERT OR REPLACE INTO users (user_id, role, is_authenticated) VALUES (?, ?, ?)",
                (user_id, "teacher", 1)
            )
            conn_users.commit()
            conn_users.close()

            await message.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å!")
            response_message = get_commands_message()
            await message.answer(response_message)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", reply_markup=kb.role_selection_menu())

    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å", reply_markup=kb.role_selection_menu())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", reply_markup=kb.role_selection_menu())
    finally:
        await state.clear()
        await state.set_state(UserStates.DefaultState)

@router.callback_query(lambda c: c.data == "role_student")
async def role_student(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("SELECT role, is_authenticated, class_id FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if (
        user  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        and user[0]  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ role —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        and user[1] == 1  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ is_authenticated —Ä–∞–≤–µ–Ω 1
        and user[2] is not None  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ class_id –Ω–µ NULL
        and user[0] == "student"  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ role —Ä–∞–≤–µ–Ω "student"
    ):
        response_message = get_commands_message()
        await callback.message.answer(response_message)
        await callback.message.answer(
            f"‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç.\n –í–∞—à –∫–ª–∞—Å—Å {user[2]}", 
            reply_markup=kb.back_role_2()
        )
    else:
        conn = sqlite3.connect("users.db", isolation_level=None)
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO users (user_id, role, is_authenticated) VALUES (?, ?, ?)",
                   (user_id, "student", 1))
        conn.commit()
        conn.close()
        await callback.message.answer("–í –∫–∞–∫–æ–º –≤—ã –∫–ª–∞—Å—Å–µ —É—á–∏—Ç–µ—Å—å?\n–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–ª —É—á–∏—Ç–µ–ª—å.", reply_markup=kb.generate_class_menu())


@router.callback_query(lambda c: c.data == "change_classssss")
async def chanhe_classss(callback: types.CallbackQuery):
    await callback.message.answer("–í –∫–∞–∫–æ–º –≤—ã –∫–ª–∞—Å—Å–µ —É—á–∏—Ç–µ—Å—å?\n–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–ª —É—á–∏—Ç–µ–ª—å.", reply_markup=kb.back_3())



@router.callback_query(lambda c: c.data == "exit_to_role")
async def exit_to_role(callback: types.CallbackQuery):
    await callback.message.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb.role_selection_menu())

@router.callback_query(lambda c: c.data.startswith("select_class_"))
async def select_class(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    class_id = callback.data.split("_")[2]

    # Update the user's class_id in users.db
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET class_id = ? WHERE user_id = ?", (class_id, user_id)
    )
    conn.commit()
    conn.close()

    await callback.message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∫–ª–∞—Å—Å —Å ID: {class_id}.")