import asyncio
import sqlite3
import time
import app.keyboards as kb
import json
import requests

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import TOKEN 
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums.parse_mode import ParseMode
bot = Bot(token=TOKEN)
router_tech = Router()
class SendMesEvent(StatesGroup):
    waiting_for_mess = State()
    all_waiting_for_mess = State()


@router_tech.message(Command("add_class"))
async def add_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("SELECT role, is_authenticated FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    if user and user[0] == "teacher" and user[1] == 1:  
        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏/–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞.", reply_markup= kb.class_menu())
        # text_to_copy = f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏ –≤—Ö–æ–¥–µ`\n {user_id}`'
        # await message.answer(text_to_copy, parse_mode=ParseMode.MARKDOWN_V2)
        # await message.answer(f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
    else:
        await message.reply(f"–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞—Å—Å–∞–º–∏!")    

         

@router_tech.message(Command("send_Events"))
async def view_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("SELECT role, is_authenticated FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    if user and user[0] == "teacher" and user[1] == 1: 
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.", reply_markup= kb.choose_view()) 

@router_tech.callback_query(lambda f: f.data == "all_send")
async def all_send(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("SELECT role, is_authenticated FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    cursor.execute("SELECT user_name FROM users WHERE user_id = ?", (user_id,))
    username = cursor.fetchone()
    conn.close()
    if user and user[0] == "teacher" and user[1] == 1:
        await state.set_state(SendMesEvent.all_waiting_for_mess)
        await callback.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /notSend")
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π!") 


@router_tech.message(SendMesEvent.all_waiting_for_mess)
async def check_all_mess(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if message.text and message.text.strip() == '/notSend':
        await message.answer("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        await state.clear()
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_type = None
    file_id = None
    caption = None
    text = None

    if message.text:
        content_type = 'text'
        text = message.text
    elif message.photo:
        content_type = 'photo'
        file_id = message.photo[-1].file_id
        caption = message.caption
    elif message.video:
        content_type = 'video'
        file_id = message.video.file_id
        caption = message.caption
    elif message.voice:
        content_type = 'voice'
        file_id = message.voice.file_id
    elif message.animation:
        content_type = 'animation'
        file_id = message.animation.file_id
        caption = message.caption
    else:
        await message.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ GIF.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()

    if not users:
        await message.reply("üö´ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    sent_count = 0
    failed_count = 0
    
    for user in users:
        user_id = str(user[0])
        try:
            if content_type == 'text':
                await bot.send_message(chat_id=user_id, text=text)
            elif content_type == 'photo':
                await bot.send_photo(chat_id=user_id, photo=file_id, caption=caption)
            elif content_type == 'video':
                await bot.send_video(chat_id=user_id, video=file_id, caption=caption)
            elif content_type == 'voice':
                await bot.send_voice(chat_id=user_id, voice=file_id)
            elif content_type == 'animation':
                await bot.send_animation(chat_id=user_id, animation=file_id, caption=caption)
            sent_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            failed_count += 1

    await message.reply(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}")
    await state.clear()


@router_tech.callback_query(lambda f: f.data == "send_choose")
async def choose_send(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    conn = sqlite3.connect("users.db", isolation_level=None)
    cursor = conn.cursor()
    cursor.execute("SELECT role, is_authenticated FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    if user and user[0] == "teacher" and user[1] == 1:
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å: ", reply_markup=kb.generate_sendmessclass())
    else:
        await callback.message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π!") 




@router_tech.callback_query(lambda f: f.data.startswith('view_'))
async def send_cshoose_mess(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º class_id –∏–∑ callback.data
    class_id = callback.data.split('view_')[1]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º class_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(class_id=class_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(SendMesEvent.waiting_for_mess)

    await callback.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /notSend")

@router_tech.message(SendMesEvent.waiting_for_mess)
async def check_mess(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if message.text and message.text.strip() == '/notSend':
        await message.answer("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        await state.clear()
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_type = None
    file_id = None
    caption = None
    text = None

    if message.text:
        content_type = 'text'
        text = message.text
    elif message.photo:
        content_type = 'photo'
        file_id = message.photo[-1].file_id
        caption = message.caption
    elif message.video:
        content_type = 'video'
        file_id = message.video.file_id
        caption = message.caption
    elif message.voice:
        content_type = 'voice'
        file_id = message.voice.file_id
    elif message.animation:
        content_type = 'animation'
        file_id = message.animation.file_id
        caption = message.caption
    else:
        await message.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ GIF.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞
    data = await state.get_data()
    class_id = data.get('class_id')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–ª–∞—Å—Å–∞
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE class_id = ?", (class_id,))
    class_users = cursor.fetchall()
    conn.close()

    if not class_users:
        await message.reply("üö´ –í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    sent_count = 0
    failed_count = 0

    for user in class_users:
        user_id = str(user[0])
        try:
            if content_type == 'text':
                await bot.send_message(chat_id=user_id, text=text)
            elif content_type == 'photo':
                await bot.send_photo(chat_id=user_id, photo=file_id, caption=caption)
            elif content_type == 'video':
                await bot.send_video(chat_id=user_id, video=file_id, caption=caption)
            elif content_type == 'voice':
                await bot.send_voice(chat_id=user_id, voice=file_id)
            elif content_type == 'animation':
                await bot.send_animation(chat_id=user_id, animation=file_id, caption=caption)
            sent_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            failed_count += 1

    await message.reply(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}")
    await state.clear()